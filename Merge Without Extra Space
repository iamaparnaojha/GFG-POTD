PROBLEM:

Merge Without Extra Space

Given two sorted arrays a[] and b[] of size n and m respectively, the task is to merge them in sorted order without using any extra space. Modify a[] so that it contains the first n elements and modify b[] so that it contains the last m elements.

Examples:

Input: a[] = [2, 4, 7, 10], b[] = [2, 3]
Output:
2 2 3 4
7 10
Explanation: After merging the two non-decreasing arrays, we get, 2 2 3 4 7 10
Input: a[] = [1, 5, 9, 10, 15, 20], b[] = [2, 3, 8, 13]
Output:
1 2 3 5 8 9
10 13 15 20
Explanation: After merging two sorted arrays we get 5 10 12 18 20.
Input: a[] = [0, 1], b[] = [2, 3]
Output:
0 1
2 3
Explanation: After merging two sorted arrays we get 0 1 2 3.
Constraints:
1 <= a.size(), b.size() <= 105
0 <= a[i], b[i] <= 107

CODE:
class Solution {
  public:
    void mergeArrays(vector<int>& a, vector<int>& b) {
       int n = a.size(), m = b.size();
    int gap = (n + m + 1) / 2; // Initial gap
    
    // Use the gap method to compare and swap elements
    while (gap > 0) {
        int i = 0, j = gap;

        while (j < (n + m)) {
            // Compare within a[]
            if (j < n && a[i] > a[j]) {
                swap(a[i], a[j]);
            }
            // Compare between a[] and b[]
            else if (j >= n && i < n && a[i] > b[j - n]) {
                swap(a[i], b[j - n]);
            }
            // Compare within b[]
            else if (j >= n && i >= n && b[i - n] > b[j - n]) {
                swap(b[i - n], b[j - n]);
            }
            i++;
            j++;
        }

        // Reduce the gap for the next iteration
        if (gap == 1) break;
        gap = (gap + 1) / 2;
    }
    }
};


CODE:
